import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
%matplotlib inline
warnings.filterwarnings('ignore')

df=pd.read_csv("C:/Users/admin/Downloads/archive (13)/Boston.csv")
df.drop(columns=['Unnamed: 0'],axis=0,inplace=True)
df.head()

df.describe()

df.info()

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
df=pd.read_csv("C:/Users/admin/Downloads/archive (13)/Boston.csv")
df=df.copy()

df

df['rad'].mean()

df.isnull().sum()

df['rad'].fillna(df['rad'].mean(),inplace=True)

df['rad'].isnull().sum()

df.isnull().sum()

corr=df.corr()
plt.figure(figsize=(20,10))
sns.heatmap(corr,annot=True,cmap='coolwarm')

def correlation(dataset,threshold):
    col_corr=set()
    corr_matrix=dataset.corr()
    for i in range(len(corr_matrix.columns)):
        for j in range(i):
            if abs(corr_matrix.iloc[i,j])>threshold:
                colname=corr_matrix.columns[i]
                col_corr.add(colname)
    return col_corr

corr_features=correlation(df1,0.7)
len(set(corr_features))

corr_features

df.drop(['age','nox','dis','tax'],axis=1,inplace=True)

df

plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
plt.title('crim')
sns.boxplot(df1['crim'])

plt.subplot(1,2,2)
plt.title('crim')
sns.distplot(df1['crim'])

plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
plt.title('zn')
sns.boxplot(df1['zn'])

plt.subplot(1,2,2)
plt.title('zn')
sns.distplot(df1['zn'])

plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
plt.title('rm')
sns.boxplot(df1['rm'])

plt.subplot(1,2,2)
plt.title('rm')
sns.distplot(df1['rm'])

plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
plt.title('medv')
sns.boxplot(df1['medv'])

plt.subplot(1,2,2)
plt.title('medv')
sns.distplot(df1['medv'])

q1=df['rm'].quantile(0.25)
q3=df['rm'].quantile(0.75)
iqr=q3-q1

q1,q3,iqr

upper_limit=q3+(1.5*iqr)
lower_limit=q1-(1.5*iqr)
upper_limit,lower_limit

df.loc[(df['rm']>upper_limit)|(df['rm']<lower_limit)]

df.loc[(df['rm']>upper_limit),'rm']=upper_limit
df.loc[(df['rm']<lower_limit),'rm']=lower_limit

plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
plt.title('rm')
sns.boxplot(df1['rm'])

plt.subplot(1,2,2)
plt.title('rm')
sns.distplot(df1['rm'])

q1=df['medv'].quantile(0.25)
q3=df['medv'].quantile(0.75)
iqr=q3-q1

q1,q3,iqr

upper_limit=q3+(1.5*iqr)
lower_limit=q1-(1.5*iqr)
upper_limit,lower_limit

df.loc[(df['medv']>upper_limit)|(df['medv']<lower_limit)]

df.loc[(df['medv']>upper_limit),'medv']=upper_limit
df.loc[(df['medv']<lower_limit),'medv']=lower_limit

plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
plt.title('medv')
sns.boxplot(df1['medv'])

plt.subplot(1,2,2)
plt.title('medv')
sns.distplot(df1['medv'])

x=df.drop(columns=['medv'],axis=1)
y=df['medv']

x

y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=5)

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
scaler.fit(x_train)
x_train_scaled=scaler.transform(x_train)
x_test_scaled=scaler.transform(x_test)

x_test_scaled

def train(model,x,y):
    model.fit(x_train,y_train)
    global pred
    pred=model.predict(x_test)

def evaluate_model():
    from sklearn.model_selection import cross_val_score,train_test_split
    from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score
    cv_score=cross_val_score(model,x,y, scoring='neg_mean_squared_error', cv=5)
    cv_score=np.abs(np.mean(cv_score))
    print("Model Report")
    print("MSE:",mean_squared_error(y_test, pred))
    print('CV Score:',cv_score)
    print("MAE:",mean_absolute_error(y_test, pred))
    print("RMSE:",np.sqrt(mean_squared_error(y_test, pred)))
    print("r-square:",r2_score(y_test, pred))

from sklearn.linear_model import LinearRegression
model=LinearRegression(normalize=True)

train(model,x,y)
evaluate_model()

